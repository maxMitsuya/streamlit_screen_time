# -*- coding: utf-8 -*-
"""Analise_ScreenTime.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lA1g1I0B6L7vk0nqkxuhrW9qcQ0HASMh

# Análise do Dataset de Tempo de Tela em Crianças e Adolescentes

## Entendimento do negócio

Este dataset contém informações sobre o tempo de tela (screen time) de crianças e adolescentes entre 5 e 15 anos, categorizado por:

- Idade (5-15 anos)

- Gênero (Masculino, Feminino, Outro/Prefere não dizer)

- Tipo de tempo de tela (Educacional, Recreacional, Total)

- Tipo de dia (Dia de semana, Final de semana)

- Tempo médio de tela em horas

- Tamanho da amostra

## Objetivo

Prever o tempo médio de tela em horas com base em características demográficas

## Pré-processamento dos dados
"""

# import das bibliotecas
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder

#Carregando dados
df = pd.read_csv('screen_time.csv')
df.head()

#Analisando o df
df.info()

#Avaliando presença de dados nulos
df.isnull().sum().sort_values(ascending=False)

#Avaliando presença de dados duplicados
df.duplicated().sum()

# Selecionar features relevantes
features = df.drop(['Average Screen Time (hours)', 'Sample Size'], axis=1)
target = df['Average Screen Time (hours)']

le = LabelEncoder()
df['Gender'] = le.fit_transform(df['Gender'])
df['Day Type'] = le.fit_transform(df['Day Type'])
df['Screen Time Type'] = le.fit_transform(df['Screen Time Type'])

df.head()

df.corr()

import seaborn as sns
import matplotlib.pyplot as plt

sns.heatmap(df.drop('Sample Size', axis = 1).corr(), annot=True)
plt.show()

final_features = df.drop(['Average Screen Time (hours)', 'Sample Size'] , axis = 1)
target = df['Average Screen Time (hours)']

# Dividir em conjuntos de treino e teste
X_train, X_test, y_train, y_test = train_test_split(final_features, target,
                                                   test_size=0.2, random_state=42)

"""## Modelagem dos dados"""

# Regressão Linear
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Criar e treinar o modelo
lr = LinearRegression()
lr.fit(X_train, y_train)

# Prever e avaliar
y_pred = lr.predict(X_test)

print("Regressão Linear:")
print(f"MSE: {mean_squared_error(y_test, y_pred):.2f}")
print(f"R²: {r2_score(y_test, y_pred):.2f}")

# Árvore de decisão
from sklearn.tree import DecisionTreeRegressor

dt = DecisionTreeRegressor(random_state=42)
dt.fit(X_train, y_train)

y_pred = dt.predict(X_test)

print("\nÁrvore de Decisão:")
print(f"MSE: {mean_squared_error(y_test, y_pred):.2f}")
print(f"R²: {r2_score(y_test, y_pred):.2f}")

# Random Forest
from sklearn.ensemble import RandomForestRegressor

rf = RandomForestRegressor(random_state=42)
rf.fit(X_train, y_train)

y_pred = rf.predict(X_test)

print("\nRandom Forest:")
print(f"MSE: {mean_squared_error(y_test, y_pred):.2f}")
print(f"R²: {r2_score(y_test, y_pred):.2f}")

results = {}

results['Regressão Linear'] = {
    'MSE': mean_squared_error(y_test, lr.predict(X_test)),
    'R²': r2_score(y_test, lr.predict(X_test))
}

results['Decision Tree'] = {
    'MSE': mean_squared_error(y_test, dt.predict(X_test)),
    'R²': r2_score(y_test, dt.predict(X_test))
}

results['Random Forest'] = {
    'MSE': mean_squared_error(y_test, rf.predict(X_test)),
    'R²': r2_score(y_test, rf.predict(X_test))
}

df_results = pd.DataFrame(results).T.sort_values(by='R²', ascending=False)
df_results

# Importância das features
feature_importance = rf.feature_importances_
features_names = final_features.columns

plt.barh(features_names, feature_importance)
plt.xlabel('Importância da Feature')
plt.title('Importância das Features no Modelo')
plt.show()

import joblib

# Salvar o modelo
joblib.dump(rf, 'screen_time_predictor.pkl')

# Carregar o modelo
loaded_model = joblib.load('screen_time_predictor.pkl')

# Exemplo de uso
new_data = pd.DataFrame({
    'Age': [10],
    'Gender': [1],
    'Screen Time Type': [0],
    'Day Type': [1]
})

prediction = loaded_model.predict(new_data)
print(f"Tempo de tela previsto: {prediction[0]:.2f} horas")


